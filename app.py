import os
from FileReader import CsvFileReader
from DataPicker import DataPicker
from Analyzers import *

# Console application. Handles input/output.
class App:

    def clear(self) -> None:
        os.system('cls' if os.name == 'nt' else 'clear')

    def request_int_input(self, tip: str, available_options: list[int]) -> int:
        while True:
            user_input = input(tip)
            try:
                selected_option = int(user_input)
            except ValueError:
                print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–≤—ñ–¥, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                print()
                continue
            if selected_option not in available_options:
                print("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É.")
                print()
                continue
            break
        return selected_option
    
    def pause(self) -> None:
        input('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "Enter" —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...')

    def start(self) -> None:
        self.run_test_scenario()

    def start2(self) -> None:
        self.clear()

        print("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:")
        print("1 - –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π")
        print("2 - –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ä—É—á–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π")
        print("3 - –í–∏–π—Ç–∏")
        print()
        
        selected_option = self.request_int_input("–í–µ–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é: ", [1, 2, 3])
        if selected_option == 1:
            self.run_test_scenario()
        elif selected_option == 2:
            self.run_manual_scenario()
        elif selected_option == 3:
            exit()

    def run_test_scenario(self) -> None:
        self.clear()

        print('–ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª "data.csv".')
        file_path = "data.csv"
        reader = CsvFileReader()
        reader.read_file(file_path)
        print("–ü–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤ —Ñ–∞–π–ª–∞:")
        print(reader.peek_first_rows(5))
        print()

        print("–û–±—Ä–∞–Ω—ñ –¥–∞–Ω—ñ - —á–∞—Å —Ä–æ–±–æ—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—É.")
        print("–û–±—Ä–∞–Ω—ñ 100 –∑–Ω–∞—á–µ–Ω—å —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ.")
        picker = DataPicker(reader.extract_number_column(1, False))
        general_analyzer = GeneralAnalyzer(picker.pick_random(100))
        print("–†–∞–Ω–∂–æ–≤–∞–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞:")
        print(general_analyzer.get_data_representation_string(10))
        print()

        print("–ó–Ω–∞–π–¥–µ–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.")   
        general_analyzer.find_interval_parameters()
        print(f"–†–æ–∑–º–∞—Ö: {general_analyzer.range}")
        print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤: {general_analyzer.intervals_count}")
        print(f"–†–æ–∑–º—ñ—Ä –æ–¥–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É: {general_analyzer.interval_size}")
        print()

        print(f"–¢–∞–±–ª–∏—Ü—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É:")
        general_analyzer.build_intervals_table()
        print(general_analyzer.intervals_table.get_table_representation())
        print()

        print("–ì—Ä–∞—Ñ—ñ–∫–∏ –≤–∏–≤–µ–¥–µ–Ω—ñ –æ–∫—Ä–µ–º–æ.")
        general_analyzer.plot_graphics()
        general_analyzer.plots.show()
        print("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
        general_analyzer.find_characteristics()
        print(f"–°–µ—Ä–µ–¥–Ω—î: a = {general_analyzer.average}")
        print(f"–î–∏—Å–ø–µ—Ä—Å—ñ—è: s¬≤ = {general_analyzer.dispersion}")
        print(f"–°–µ—Ä–µ–¥–Ω—î –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: s = {general_analyzer.std}")
        print(f"–ú–æ–¥–∏: {str.join(" ", [f"Mo{i + 1} = {mode}" for i, mode in enumerate(general_analyzer.modes)])}")
        print(f"–ú–µ–¥—ñ–∞–Ω–∞: Me = {general_analyzer.median}")
        print(f"–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –≤–∞—Ä—ñ–∞—Ü—ñ—ó: v = {round(general_analyzer.variation * 100, 2)}%")
        print()

        print("–í–∏—Å–Ω–æ–≤–æ–∫:")
        if general_analyzer.variation < .1:
            print("–ú—ñ–Ω–ª–∏–≤—ñ—Å—Ç—å –≤–∏–±—ñ—Ä–∫–∏ —î –Ω–µ–∑–Ω–∞—á–Ω–æ—é.")
        elif general_analyzer.variation < .25:
            print("–ú—ñ–Ω–ª–∏–≤—ñ—Å—Ç—å –≤–∏–±—ñ—Ä–∫–∏ —î —Å–µ—Ä–µ–¥–Ω—å–æ—é.")
        else:
            print("–ú—ñ–Ω–ª–∏–≤—ñ—Å—Ç—å –≤–∏–±—ñ—Ä–∫–∏ —î –∑–Ω–∞—á–Ω–æ—é. –ú–æ–∂–ª–∏–≤—ñ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—ñ.")
        print()
        self.pause()
        print()

        print("–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ —è–∫ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É.")
        normal_analyzer = general_analyzer.get_concrete_analyzer(0)
        print("–ú–µ—Ç–æ–¥–æ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –ø—Ä–∞–≤–¥–æ–ø–æ–¥—ñ–±–Ω–æ—Å—Ç—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª—É:")
        normal_analyzer.find_parameters_estimation()
        print(f"–û—Ü—ñ–Ω–∫–∞ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ: {normal_analyzer.estimate_average}")
        print(f"–û—Ü—ñ–Ω–∫–∞ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–≥–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {normal_analyzer.estimate_std}")
        print()

        print("–î–ª—è –ø–æ—à—É–∫—É —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –º—ñ–∂ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ —Ç–∞ —á–∞—Å—Ç—ñ—Å—Ç—é –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –ø–∞—Ä–∞–±–æ–ª–∞ (–æ—Å–∫—ñ–ª—å–∫–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π).")
        print("–ó–Ω–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞–±–æ–ª–∞:")
        normal_analyzer.find_possible_dependence()
        print("y = {}x^2 + {}x + {}".format(*normal_analyzer.possible_dependence_parameteres))

        print("–î–æ–≤—ñ—Ä—á—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –∑ –¥–æ–≤—ñ—Ä—á–æ—é –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é ùú∏ = 0.95:")
        normal_analyzer.find_confidence_intervals(0.95)
        print("–î–ª—è –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ: [{}, {}]".format(*normal_analyzer.average_confidence_interval))
        print("–î–ª—è –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ—ó –¥–∏—Å–ø–µ—Ä—Å—ñ—ó: [{}, {}]".format(*normal_analyzer.dispersion_confidence_interval))
        print("–ó –π–æ–º–≤—ñ—Ä–Ω—ñ—Å—Ç—é 95% —Å–µ—Ä–µ–¥–Ω—î —Ç–∞ –¥–∏—Å–ø–µ—Ä—Å—ñ—è –æ–ø–∏–Ω—è—Ç—å—Å—è —É –≤–∫–∞–∑–∞–Ω–∏—Ö –≤–∏—â–µ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö.")
        print()

        print("–ì—ñ–ø–æ—Ç–µ–∑–∞ –ø—Ä–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ.")
        print("H0: a = 75.")
        print(f"H1: a = {general_analyzer.average} (—Ç–æ–±—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–µ —Å–µ—Ä–µ–¥–Ω—î).")
        print("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –Ω–∞ —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ ùõº = 0.05.")
        normal_analyzer.test_parameter_hypothesis(0.05, 75)
        print()

        print(f"–ì—ñ–ø–æ—Ç–µ–∑–∞ H0{"" if normal_analyzer.hipothesis0_parameter_rejected else " –Ω–µ"} –≤—ñ–¥–∫–∏–Ω—É—Ç–∞ –Ω–∞ —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ ùõº = 0.05.")
        print("–ö—Ä–∏—Ç–∏—á–Ω–∞ –æ–±–ª–∞—Å—Ç—å: ({}, {})".format(*normal_analyzer.average_critical_range))
        print(f"–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—é: {normal_analyzer.average_criteria_power}")
        print()

        print("–ó–Ω–∞–π–¥–µ–º–æ –æ–±—Å—è–≥ –≤–∏–±—ñ—Ä–∫–∏, –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–∑ –∑–∞–¥–∞–Ω–∏–º–∏ ùõº = 0.05 ùõΩ = 0.025:")
        normal_analyzer.find_n_from_alpha_and_beta(75, 0.05, 0.025)
        print(f"–ù–µ–æ–±—Ö—ñ–¥–Ω–∏–π –æ–±—Å—è–≥ –≤–∏–±—ñ—Ä–∫–∏: {normal_analyzer.required_n}")

        print("–ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –≥—ñ–ø–æ—Ç–µ–∑—É –ø—Ä–æ –∑–∞–∫–æ–Ω —Ä–æ–∑–ø–æ–¥—ñ–ª—É –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ—ó —Å—É–∫—É–ø–Ω–æ—Å—Ç—ñ.")
        print("H0: N(a, ùúé¬≤) ---> N(75, 49)")
        print("H1: N(a, ùúé¬≤) -/-> N(75, 49)")
        print("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –Ω–∞ —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ ùõº = 0.05.")
        normal_analyzer.test_for_normal_distribution(75, 49, 0.05)

        print(f"–ì—ñ–ø–æ—Ç–µ–∑–∞ H0{" –Ω–µ" if normal_analyzer.is_normal_dist else ""} –≤—ñ–¥–∫–∏–Ω—É—Ç–∞ –Ω–∞ —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ ùõº = 0.05.")
        print()
        self.pause()
        print()

        print("–î—Ä—É–≥—ñ –æ–±—Ä–∞–Ω—ñ –¥–∞–Ω—ñ - –¥–æ–≤–∂–∏–Ω–∞ –∞—É–¥—ñ–æ–∑–∞–ø–∏—Å—É.")
        print("–û–±—Ä–∞–Ω—ñ 100 –∑–Ω–∞—á–µ–Ω—å —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ.")
        picker2 = DataPicker(reader.extract_number_column(2, False))
        general_analyzer2 = GeneralAnalyzer(picker2.pick_even(100))
        print("–†–∞–Ω–∂–æ–≤–∞–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞:")
        print(general_analyzer2.get_data_representation_string(10))
        print()

        print("–ó–Ω–∞–π–¥–µ–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.")   
        general_analyzer2.find_interval_parameters()
        print(f"–†–æ–∑–º–∞—Ö: {general_analyzer2.range}")
        print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤: {general_analyzer2.intervals_count}")
        print(f"–†–æ–∑–º—ñ—Ä –æ–¥–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É: {general_analyzer2.interval_size}")
        print()

        print(f"–¢–∞–±–ª–∏—Ü—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É:")
        general_analyzer2.build_intervals_table()
        print(general_analyzer2.intervals_table.get_table_representation())
        print()

        print("–ì—Ä–∞—Ñ—ñ–∫–∏ –≤–∏–≤–µ–¥–µ–Ω—ñ –æ–∫—Ä–µ–º–æ.")
        general_analyzer2.plot_graphics()
        general_analyzer2.plots.show()
        print("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
        general_analyzer2.find_characteristics()
        print(f"–°–µ—Ä–µ–¥–Ω—î: a = {general_analyzer2.average}")
        print(f"–î–∏—Å–ø–µ—Ä—Å—ñ—è: s¬≤ = {general_analyzer2.dispersion}")
        print(f"–°–µ—Ä–µ–¥–Ω—î –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: s = {general_analyzer2.std}")
        print(f"–ú–æ–¥–∏: {str.join(" ", [f"Mo{i + 1} = {mode}" for i, mode in enumerate(general_analyzer2.modes)])}")
        print(f"–ú–µ–¥—ñ–∞–Ω–∞: Me = {general_analyzer2.median}")
        print(f"–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –≤–∞—Ä—ñ–∞—Ü—ñ—ó: v = {round(general_analyzer2.variation * 100, 2)}%")
        print()

        print("–í–∏—Å–Ω–æ–≤–æ–∫:")
        if general_analyzer2.variation < .1:
            print("–ú—ñ–Ω–ª–∏–≤—ñ—Å—Ç—å –≤–∏–±—ñ—Ä–∫–∏ —î –Ω–µ–∑–Ω–∞—á–Ω–æ—é.")
        elif general_analyzer2.variation < .25:
            print("–ú—ñ–Ω–ª–∏–≤—ñ—Å—Ç—å –≤–∏–±—ñ—Ä–∫–∏ —î —Å–µ—Ä–µ–¥–Ω—å–æ—é.")
        else:
            print("–ú—ñ–Ω–ª–∏–≤—ñ—Å—Ç—å –≤–∏–±—ñ—Ä–∫–∏ —î –∑–Ω–∞—á–Ω–æ—é. –ú–æ–∂–ª–∏–≤—ñ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—ñ.")
        print()
        self.pause()
        print()

        print("–°–∫–ª–∞–¥–µ–º–æ –¥–≤–æ–≤–∏–º—ñ—Ä–Ω—É —Ç–∞–±–ª–∏—Ü—é:")
        correlation_analyzer = CorrelationAnalyzer(general_analyzer2, general_analyzer)
        correlation_analyzer.build_2d_table()
        print(correlation_analyzer.get_table_representation())
        print()

        print("–†—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–≥—Ä–µ—Å—ñ—ó:")
        correlation_analyzer.find_linear_regressions()
        print("Y –ø–æ X: y = {}x {}".format(correlation_analyzer.y_on_x_parameters[0], f"- {-1 * correlation_analyzer.y_on_x_parameters[1]}" if correlation_analyzer.y_on_x_parameters[1] < 0 else f"+ {correlation_analyzer.y_on_x_parameters[1]}"))
        print("X –ø–æ Y: y = {}x {}".format(correlation_analyzer.x_on_y_parameters[0], f"- {-1 * correlation_analyzer.x_on_y_parameters[1]}" if correlation_analyzer.x_on_y_parameters[1] < 0 else f"+ {correlation_analyzer.x_on_y_parameters[1]}"))
        correlation_analyzer.regressions.show()
        print(f"–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–æ—Ä–µ–ª—è—Ü—ñ—ó: {correlation_analyzer.correlation_coeffitient}")
        print("–í–µ–ª–∏—á–∏–Ω–∏ –º–∞—é—Ç—å ", end="")
        if correlation_analyzer.correlation_coeffitient < 0.25:
            print(" —Å–ª–∞–±–∫–∏–π ", end="")
        elif correlation_analyzer.correlation_coeffitient < 0.5:
            print(" —Å–µ—Ä–µ–¥–Ω—ñ–π ", end="")
        else:
            print(" —Ç—ñ—Å–Ω–∏–π ", end="")
        print(" –∑–≤ º—è–∑–æ–∫.")
        print()

        print("–ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –≥—ñ–ø–æ—Ç–µ–∑—É H0: –∑–≤ º—è–∑–æ–∫ –º—ñ–∂ —Å—É–∫—É–ø–Ω–æ—Å—Ç—è–º–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –Ω–∞ —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á—É—â–æ—Å—Ç—ñ ùõº = 0.05:")
        correlation_analyzer.test_parameters(0.05, 0.95)
        print(f"–ì—ñ–ø–æ—Ç–µ–∑–∞ H0 {"–≤—ñ–¥–∫—Ä–∏–¥–∞—î—Ç—å—Å—è" if correlation_analyzer.hypothesis0_r_rejected else "–ø—Ä–∏–π–º–∞—î—Ç—å—Å—è"}.")
        print()
        self.pause()
        print()

        print("–î–æ–≤—ñ—Ä—á–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—É –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –∑ –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—é ùú∏ = 0.95.")
        print(f"–ó –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é 95% –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É –º–µ–∂–∞—Ö {correlation_analyzer.correlation_coeffitient_range}.")
        print()

        print("–ó–Ω–∞–π–¥–µ–º–æ –∫–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–µ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Ç–∞ —ñ–Ω–¥–µ–∫—Å –∫–æ—Ä–µ–ª—è—Ü—ñ—ó.")
        correlation_analyzer.find_correlation_relation()
        print(f"–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–µ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è: {correlation_analyzer.correlation_relation}")
        print(f"–ú—ñ–∂ –≤–µ–ª–∏—á–∏–Ω–∞–º–∏ {"—ñ—Å–Ω—É—î" if correlation_analyzer.correlation_relation > 0.5 else "–Ω–µ —ñ—Å–Ω—É—î"} —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å.")
        print(f"–Ü–Ω–¥–µ–∫—Å –∫–æ—Ä–µ–ª—è—Ü—ñ—ó: {correlation_analyzer.correlation_index}")
        print(f"–í–∞—Ä—ñ–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–æ—ó Y –Ω–∞ {round(math.pow(correlation_analyzer.correlation_index, 2) * 100, 2)}% –ø–æ—è—Å–Ω—é—î—Ç—å—Å—è –≤–∞—Ä—ñ–∞—Ü—ñ—î—é –∑–º—ñ–Ω–Ω–æ—ó –•.")
        print()

        print("–ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –∑–Ω–∞—á—É—â—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–≤ º—è–∑–∫—É –∑ –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—é ùõº = 0.05:")
        correlation_analyzer.test_correlation_relation(0.05)
        print(f"–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–µ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è{"" if correlation_analyzer.correlation_relation_is_significant else " –Ω–µ"} —î –∑–Ω–∞—á—É—â–∏–º.")
        print(f"–Ü–Ω–¥–µ–∫—Å –∫–æ—Ä–µ–ª—è—Ü—ñ—ó{"" if correlation_analyzer.correlation_index_is_significant else " –Ω–µ"} —î –∑–Ω–∞—á—É—â–∏–º.")
        print()

        print("–ö—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏.")
        self.pause()

    def run_manual_scenario(self) -> None:
        self.clear()